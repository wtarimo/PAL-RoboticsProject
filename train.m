function output = train(inds,gens)
state = robot_state();
gen = pop_generation();
evolution = train_pop2();
fit = fitness();

set(0,'RecursionLimit',1000)
constants();
global robot; robot=load('robot.txt');
global leg_height_equiv_dist; 
leg_height_equiv_dist = state.get_height_equiv_dist();
global ind_per_pop; ind_per_pop = inds;
global prob_of_mutate; prob_of_mutate = 300;
global generations; generations = gens;
global start; start = 0;
global temp; temp = 0;
global start_length; start_length = 1;
global loop_length; loop_length = 12;

%pop = {{0 0 {[0 1228]} {[9 2842] [2 595] [16 19] [6 1708] [15 556] [14 2898] [15 1235] [7 1061] [24 37] [7 2675] [9 2675]} 1} {0 0 {[0 1228]} {[8 2842] [4 595] [17 19] [10 1708] [16 556] [15 2898] [20 1235] [9 1061] [21 37] [14 2643] [29 2675]} 1} {0 32768 {[0 1228]} {[10 2842] [9 595] [17 19] [5 1708] [8 556] [15 2898] [18 1235] [2 1061] [26 37] [14 2675]} 1} {0 0 {[0 1228]} {[9 2842] [3 599] [17 19] [10 1708] [7 556] [14 2898] [19 1235] [2 1061] [26 37] [1 2643] [15 2675] [6 2675]} 1} {0 256 {[0 1228]} {[12 2842] [5 599] [18 19] [10 1708] [18 556] [8 2899] [21 1235] [4 1061] [31 37] [7 2643] [6 2675]} 1} {0 1024 {[0 1228]} {[12 2842] [5 599] [18 19] [10 1708] [19 556] [16 2899] [21 1235] [4 1061] [26 37] [14 2675] [6 2675]} 1} {0 0 {[10 17612]} {[11 2842] [4 599] [19 19] [9 1708] [7 556] [11 2898] [19 1235] [1 2597] [24 37] [8 2643] [18 2675] [8 2675]} 1} {0 0 {[0 1228]} {[12 2842] [5 599] [20 19] [8 1708] [9 556] [16 2898] [21 1235] [8 1061] [26 37] [15 2675]} 1} {0 0 {[13 1228]} {[7 2842] [3 599] [17 19] [9 1708] [10 556] [14 2898] [19 1235] [6 1061] [20 37] [6 2675] [6 2674]} 1} {0 0 {[0 1228]} {[10 2842] [6 595] [18 19] [10 1708] [9 556] [16 2898] [21 1235] [7 1061] [26 37] [2 2643] [16 2675]} 1} {0 256 {[0 1228]} {[12 2842] [7 595] [16 19] [9 1708] [17 556] [16 2898] [20 1235] [4 2597] [33 37] [3 2675] [8 2675]} 1} {0 0 {[0 1228]} {[9 2842] [5 595] [17 19] [7 1708] [8 556] [13 2898] [0 1219] [8 1061] [23 37] [8 2643]} 1} {0 0 {[0 1228]} {[7 2842] [4 599] [17 19] [9 1708] [16 556] [11 2898] [19 1235] [3 2085] [25 37] [8 2643] [15 2675]} 1} {0 0 {[7 1230]} {[10 2842] [5 599] [20 19] [8 1708] [9 556] [13 2898] [20 1235] [8 1061] [23 37] [8 2675]} 1} {0 0 {[0 1228]} {[6 2842] [5 595] [19 19] [9 1709] [15 556] [14 2898] [19 1235] [6 1061] [20 37] [10 2675]} 1} {0 0 {[0 1228]} {[8 2842] [4 595] [17 19] [10 1708] [10 556] [15 2898] [18 1235] [2 1061] [25 37] [9 2643] [29 2675]} 1} {0 0 {[0 1230]} {[7 2842] [3 595] [22 19] [7 1708] [16 556] [13 2898] [19 1235] [8 1061] [25 37] [8 2675]} 1} {0 0 {[7 1228]} {[11 2842] [5 595] [17 19] [10 1708] [10 556] [15 2898] [18 1235] [2 1061] [25 37] [9 2643] [7 2675]} 1} {0 0 {[7 1228]} {[9 2842] [5 595] [19 19] [10 1708] [10 556] [15 2898] [18 1235] [2 1061] [25 37] [9 2643] [6 2674]} 1} {0 0 {[0 1228]} {[7 2842] [3 599] [19 19] [10 1708] [10 556] [14 2898] [19 1235] [6 1061] [20 37] [9 2643] [15 2675] [6 2675]} 1} {0 0 {[0 1228]} {[9 2842] [5 595] [19 19] [10 1708] [18 556] [12 2898] [4 1235] [7 1061] [25 37] [3 2643] [6 2674]} 1} {0 32768 {[0 1228]} {[9 2842] [5 595] [17 19] [6 1709] [8 556] [14 2898] [19 1235] [6 1061] [20 37] [10 2675]} 1} {0 0 {[0 1228]} {[6 2842] [2 599] [16 19] [13 1708] [11 556] [13 2898] [18 1235] [5 1061] [19 37] [5 2675]} 1} {0 1024 {[0 1228]} {[12 2842] [5 599] [14 19] [8 1708] [16 556] [15 2898] [20 1235] [9 1061] [21 37] [1 2643] [6 2675]} 1} {0 0 {[0 1228]} {[7 2842] [3 595] [17 19] [9 1708] [7 556] [14 2898] [19 1235] [5 1189] [27 37] [2 2643] [6 2674]} 1} {0 0 {[0 1228]} {[7 2842] [4 599] [19 19] [9 1708] [7 556] [13 2898] [19 1235] [1 2597] [24 37] [8 2675]} 1} {0 0 {[0 1228]} {[9 2842] [5 595] [17 19] [7 1708] [8 556] [15 2898] [20 1235] [6 1061] [25 37] [1 2643]} 1} {0 32768 {[0 1228]} {[9 2842] [5 595] [17 19] [7 1708] [8 556] [15 2898] [18 1235] [2 1061] [25 37] [1 2643]} 1} {0 32768 {[0 1228]} {[9 2842] [5 595] [17 19] [7 1708] [8 556] [15 2898] [18 1235] [2 1061] [25 37] [1 2643]} 1} {0 0 {[0 1228]} {[10 2842] [5 595] [17 19] [7 1708] [8 556] [15 2898] [18 1235] [2 1061] [25 37] [1 2643]} 1}};

pop = gen.make_random_pop(ind_per_pop,loop_length);
out = evolution.train(pop,generations);
state.reset_robot();
fits = fit.evaluate(out);
best = out{fits==max(fits)};
printpop(out,best);
output = out;

