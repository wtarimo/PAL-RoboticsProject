function myfitness = fitness()
myfitness.evaluate = @evaluate;
myfitness.get_ind_fitness = @get_ind_fitness;
myfitness.get_gene_fitness = @get_gene_fitness;

state = robot_state();
state.reset_robot();
%inhbcoord = coord_inhib();
pop = {{902 12561 {[0 0]} {[11 2591] [29 2194] [28 3739] [16 3640] [11 826] [21 3365] [48 2866] [47 1826] [8 1827] [12 2935] [13 2116] [37 2091]} 1} {2880 20635 {[0 0]} {[12 1091] [24 523] [24 3936] [46 3869] [9 1255] [7 1005] [19 2881] [47 3350] [47 2395] [25 4014] [23 2525] [13 2722]} 1} {678 24186 {[0 0]} {[15 853] [20 2578] [6 1173] [16 735] [12 2350] [45 690] [2 3799] [36 1243] [10 1757] [25 2140] [9 2342] [35 210]} 1} {3699 28771 {[0 0]} {[0 2180] [40 1640] [26 1123] [0 3143] [26 2867] [21 2335] [10 1577] [21 2858] [32 1229] [14 3851] [44 82] [37 357]} 1} {3913 10242 {[0 0]} {[0 280] [2 2218] [46 242] [5 2545] [49 576] [34 739] [13 3445] [30 2206] [39 1120] [38 2452] [6 1429] [23 3867]} 1} {489 13053 {[0 0]} {[41 1571] [44 3735] [49 2174] [32 1679] [36 367] [16 1985] [6 3290] [28 506] [25 714] [9 2429] [32 2854] [25 2188]} 1} {3832 19228 {[0 0]} {[47 3298] [6 465] [6 1315] [10 2273] [5 2046] [39 2904] [46 2183] [10 2012] [37 2355] [33 3225] [37 3887] [6 2184]} 1} {2848 13808 {[0 0]} {[7 1666] [12 2073] [8 3368] [0 905] [24 280] [41 3425] [4 188] [41 1800] [27 3283] [37 3215] [42 3029] [4 1442]} 1} {1827 17727 {[0 0]} {[15 51] [48 788] [22 691] [17 1331] [34 1013] [3 2428] [3 407] [40 2084] [27 3790] [41 3835] [15 1880] [4 657]} 1} {3999 22194 {[0 0]} {[31 810] [4 106] [16 1015] [11 2200] [33 943] [17 1895] [17 862] [36 4067] [49 3170] [21 1439] [5 997] [33 3602]} 1} {3404 21500 {[0 0]} {[4 1170] [49 2523] [0 2845] [37 1124] [27 3972] [21 2768] [16 2601] [48 3823] [40 3766] [35 3628] [31 3995] [38 711]} 1} {1253 13011 {[0 0]} {[24 1443] [13 1302] [49 3680] [10 2893] [30 685] [43 870] [27 1591] [18 504] [34 2820] [31 589] [29 1218] [12 1890]} 1} {1794 29902 {[0 0]} {[11 901] [24 961] [24 4066] [44 3070] [17 1102] [25 3285] [7 945] [23 438] [7 618] [37 1963] [23 2439] [47 3735]} 1} {103 10168 {[0 0]} {[22 1893] [26 918] [34 3547] [8 296] [43 1947] [12 3790] [11 2764] [34 729] [2 548] [41 13] [44 9] [24 1819]} 1} {2493 25911 {[0 0]} {[11 1662] [25 3637] [18 639] [28 384] [15 3002] [40 3346] [36 4018] [7 1539] [33 873] [18 2311] [32 1665] [34 2954]} 1} {1967 21240 {[0 0]} {[12 498] [22 2393] [40 1027] [16 4013] [47 3048] [26 1849] [20 665] [27 2038] [14 2908] [26 3160] [35 1827] [46 687]} 1} {2800 8879 {[0 0]} {[31 1791] [43 1727] [25 1148] [7 2656] [31 3924] [31 2296] [41 4019] [28 340] [6 2869] [27 4015] [3 2075] [19 3883]} 1} {53 4613 {[0 0]} {[25 3789] [18 1027] [6 560] [30 3143] [45 2340] [42 2568] [34 3878] [22 1750] [45 29] [0 1215] [16 2973] [49 4007]} 1} {42 27309 {[0 0]} {[40 3724] [21 2782] [41 1880] [33 3100] [44 2205] [40 3608] [2 1323] [33 2344] [7 841] [18 2347] [38 4050] [41 3814]} 1} {3969 614 {[0 0]} {[42 1908] [10 244] [5 2563] [0 3215] [15 2256] [47 1241] [10 500] [35 1270] [23 2528] [3 1713] [1 3816] [20 903]} 1} {3820 15052 {[0 0]} {[40 1695] [38 2053] [31 3207] [49 3140] [49 262] [8 2543] [35 414] [25 773] [15 1323] [14 771] [15 3876] [19 69]} 1} {2830 411 {[0 0]} {[32 1375] [17 3518] [37 3320] [47 1518] [47 1127] [47 1305] [11 3189] [43 2014] [47 574] [41 4036] [37 663] [21 969]} 1} {3243 20601 {[0 0]} {[49 2246] [19 3015] [26 1429] [49 80] [15 549] [18 2548] [1 1673] [34 1112] [26 2637] [1 2722] [1 1934] [47 2246]} 1} {2144 11554 {[0 0]} {[47 528] [0 2006] [29 3199] [47 3584] [33 1383] [13 2116] [46 40] [21 1298] [6 662] [0 3422] [43 2078] [4 1515]} 1} {3821 10560 {[0 0]} {[38 3701] [2 927] [34 1008] [33 3519] [45 1383] [46 2985] [38 1399] [11 695] [43 3133] [25 3480] [40 2709] [10 3567]} 1} {3317 25211 {[0 0]} {[48 1820] [10 3263] [20 2589] [48 2599] [13 1358] [42 3041] [24 3748] [29 510] [32 1158] [33 3337] [21 260] [47 3958]} 1} {2866 660 {[0 0]} {[9 296] [46 3326] [36 2361] [32 2566] [17 1112] [1 3228] [39 4065] [3 920] [33 1156] [10 2400] [8 2482] [47 1336]} 1} {3663 16174 {[0 0]} {[12 3559] [8 2566] [4 1892] [21 2] [5 3494] [1 3447] [33 2392] [34 1074] [42 375] [40 3148] [20 3780] [5 1507]} 1} {1783 23030 {[0 0]} {[25 2679] [12 1405] [19 1748] [6 2748] [0 2167] [10 2614] [13 1851] [1 3192] [43 3219] [36 2943] [34 1642] [17 1063]} 1} {487 8366 {[0 0]} {[27 1] [42 3352] [38 1472] [31 1261] [34 2027] [11 2693] [4 457] [1 290] [40 764] [10 2211] [17 731] [30 3760]} 1} {1997 27896 {[0 0]} {[10 964] [32 2691] [23 3659] [49 1365] [28 2881] [14 524] [4 3351] [41 740] [20 3557] [29 365] [16 577] [33 47]} 1} {3402 9346 {[0 0]} {[28 1767] [3 889] [13 1718] [44 3713] [2 3475] [26 123] [6 2412] [2 3669] [16 642] [31 3976] [21 3785] [11 3927]} 1} {790 14597 {[0 0]} {[12 1693] [47 2467] [47 288] [13 3907] [42 1579] [14 402] [31 755] [16 3148] [26 516] [6 2219] [20 3759] [17 3807]} 1} {1512 10282 {[0 0]} {[14 3097] [28 2749] [25 3008] [43 573] [42 2091] [23 3316] [17 465] [4 334] [24 2462] [10 3724] [40 1060] [30 3437]} 1} {3691 31651 {[0 0]} {[24 3205] [20 96] [42 210] [46 3620] [48 719] [22 1612] [9 2627] [45 3639] [0 626] [0 3781] [44 3396] [34 1466]} 1} {335 18723 {[0 0]} {[12 2318] [41 71] [33 1643] [7 1437] [19 304] [15 3413] [38 3181] [49 3987] [22 444] [31 789] [17 1096] [30 3687]} 1} {3909 12890 {[0 0]} {[41 3831] [30 3106] [7 3794] [28 1890] [32 2705] [25 3508] [4 1163] [38 3614] [35 2212] [41 301] [4 3944] [17 2605]} 1} {1267 25844 {[0 0]} {[35 1878] [45 414] [1 2104] [23 3605] [45 538] [30 3882] [36 2761] [1 3735] [10 1132] [16 2743] [3 202] [13 1991]} 1} {2849 6808 {[0 0]} {[44 1901] [36 2680] [23 3254] [2 132] [42 1788] [12 1359] [41 844] [32 398] [16 3622] [22 3432] [16 1708] [31 462]} 1} {1632 6418 {[0 0]} {[39 100] [23 3157] [47 665] [3 316] [17 1136] [33 4073] [24 3677] [18 984] [29 2847] [17 755] [42 2861] [41 3836]} 1} {1913 12798 {[0 0]} {[38 3954] [22 2277] [32 3061] [25 3842] [2 413] [16 2723] [34 2067] [22 3585] [35 3190] [16 251] [21 1160] [13 525]} 1} {2829 17154 {[0 0]} {[23 3515] [30 3542] [39 1808] [14 1148] [40 440] [39 3368] [49 2219] [28 1239] [8 3936] [11 2355] [19 1256] [18 2461]} 1} {2514 13800 {[0 0]} {[2 130] [17 1253] [37 3600] [31 2150] [31 999] [46 2862] [5 1102] [9 2302] [19 3346] [36 2393] [44 2680] [43 102]} 1} {2171 78 {[0 0]} {[10 2282] [35 945] [15 1836] [13 3433] [10 869] [17 1112] [27 2868] [7 1831] [41 2730] [23 2836] [39 3970] [38 3359]} 1} {1975 9187 {[0 0]} {[28 1054] [18 3060] [11 1160] [39 563] [29 1889] [6 1124] [26 2443] [18 2041] [15 2416] [6 1035] [3 2586] [19 619]} 1} {1075 11875 {[0 0]} {[46 2909] [6 2912] [38 1116] [26 372] [8 771] [38 755] [5 1913] [27 43] [15 1668] [0 1532] [43 3186] [48 3849]} 1} {1689 14713 {[0 0]} {[46 972] [30 2967] [46 219] [14 474] [30 1401] [8 966] [1 2370] [7 115] [3 2845] [21 3732] [1 1213] [4 3475]} 1} {931 27343 {[0 0]} {[32 3740] [33 602] [22 41] [36 1570] [23 2558] [36 1670] [42 3835] [26 1404] [37 3177] [17 1916] [0 3384] [42 1237]} 1} {3074 29724 {[0 0]} {[26 2297] [43 334] [37 1152] [41 3311] [27 1983] [3 1765] [26 1260] [33 2038] [36 2968] [2 1648] [7 3084] [42 1889]} 1} {3168 4878 {[0 0]} {[21 3102] [23 1581] [47 3088] [46 237] [32 492] [46 3217] [6 830] [19 3224] [38 1490] [12 3349] [34 862] [10 1017]} 1} {3435 4440 {[0 0]} {[43 3387] [20 2715] [5 264] [10 2272] [26 1978] [49 2869] [42 3609] [7 1016] [27 1120] [40 2337] [36 362] [49 1355]} 1} {987 17570 {[0 0]} {[48 3443] [10 1107] [46 2455] [7 1894] [2 1105] [31 642] [10 1452] [36 2788] [20 3149] [26 1075] [46 105] [21 520]} 1} {94 3746 {[0 0]} {[11 2556] [20 1280] [31 2026] [6 2868] [39 3797] [1 3645] [24 1595] [35 2560] [13 3812] [30 1052] [32 1643] [46 3295]} 1} {4000 23816 {[0 0]} {[16 3089] [1 2639] [38 2611] [42 3838] [5 2704] [21 1527] [15 2017] [36 1537] [44 2393] [20 2678] [19 1474] [28 1150]} 1} {2630 10621 {[0 0]} {[47 2259] [19 3561] [12 2726] [14 2414] [4 1699] [17 3442] [20 3803] [34 3985] [17 1214] [44 1258] [48 3208] [26 911]} 1} {1306 31163 {[0 0]} {[33 373] [28 1423] [48 3943] [39 3384] [12 3646] [39 1115] [12 2895] [4 858] [15 1629] [12 3390] [32 1268] [2 201]} 1} {191 24440 {[0 0]} {[12 816] [11 750] [30 2746] [5 2314] [29 2195] [27 1617] [23 2419] [7 2581] [42 3944] [25 2331] [43 1348] [45 3806]} 1} {2528 30797 {[0 0]} {[40 1833] [25 945] [49 2752] [45 1937] [2 2266] [4 2853] [36 371] [38 2172] [10 3327] [25 2588] [43 3975] [14 3199]} 1} {2363 28154 {[0 0]} {[6 662] [14 389] [24 2480] [26 3976] [15 3647] [10 1652] [48 1930] [17 3875] [2 2139] [24 3595] [0 528] [36 1119]} 1} {874 30246 {[0 0]} {[16 1707] [39 550] [10 3508] [11 919] [0 997] [11 2029] [29 3032] [9 2771] [4 1704] [36 3732] [15 1783] [49 3365]} 1} {2355 21136 {[0 0]} {[20 142] [12 1842] [47 2295] [19 619] [24 263] [45 2879] [18 2714] [35 1081] [15 2319] [41 350] [4 1147] [28 2427]} 1} {1844 20697 {[0 0]} {[4 2419] [2 3685] [43 2495] [10 1723] [41 2259] [49 2088] [34 3061] [6 3] [13 3284] [28 2078] [15 3265] [11 2070]} 1} {1576 19131 {[0 0]} {[33 1682] [45 368] [0 2591] [25 1835] [2 2688] [15 582] [45 1054] [3 3793] [4 2842] [35 117] [23 3581] [0 948]} 1} {2760 9697 {[0 0]} {[22 2307] [4 1534] [26 93] [39 1659] [39 306] [44 2385] [30 845] [4 3436] [0 2319] [2 1072] [1 613] [41 769]} 1}};
% cpop = inhbcoord.combine_pop(pop);
% cind = cpop{3};
global robot; robot=load('robot.txt');
global leg_height_equiv_dist; 
leg_height_equiv_dist = state.get_height_equiv_dist();
global inhib_coord; inhib_coord = 1;
global same_count; same_count = 0;
global num_moves; num_moves = 400;
global ind_per_pop; ind_per_pop = 1;
global start_length; start_length = 1;
global loop_length; loop_length = 12;
global prob_of_mutate; prob_of_mutate = 300;
global generations; generations = 5000;
global start; start = 0;
global temp; temp = 0;
global leg_start; leg_start = [1 1 1 1 1 1];
global leg_start_h; leg_start_h = [0.125 0.125 0.125 0.125 0.125 0.125];
global last_fwd_h; last_fwd_h = [1 1 1 1 1 1];
get_ind_fitness(cind,cind)


function popfitness = evaluate(pop)
inhbcoord = coord_inhib();
popfitness = evaluate2(inhbcoord.combine_pop(pop));

function fitness2 = evaluate2(pop)
state = robot_state();
fits = zeros(1,length(pop));
for i=1:length(pop)
    state.reset_robot();
    fits(i) = get_ind_fitness(pop{i},pop{i});
end
fitness2 = fits;
    
function indfitness = get_ind_fitness(ind,ind_org)
global num_moves;
indfitness = get_ind_fitness1(ind,ind_org,num_moves);

function indfitness1 = get_ind_fitness1(ind,ind_org,num)
if isempty(ind)
    if ~isempty(find(ind_org==-1, 1))
        indfitness1 = get_ind_fitness2(ind_org(2:end),ind_org(2:end),num);
    else
        disp(ind_org);
    end
elseif (ind(1) == -1)
    indfitness1 = get_ind_fitness2(ind(2:end),ind(2:end),num);
else
    indfitness1 = get_gene_fitness(ind(1)) + get_ind_fitness1(ind(2:end),ind_org,num-1);
end

function indfitness2 = get_ind_fitness2(ind,ind_org,num)
if (num <= 0)
    indfitness2 = 0;
elseif isempty(ind)
    indfitness2 = get_ind_fitness2(ind_org,ind_org,num);
else
    indfitness2 = get_gene_fitness(ind(1)) + get_ind_fitness2(ind(2:end),ind_org,num-1);
end

function gene_fitness = get_gene_fitness(gene)
gene_fitness = get_gene_fitness2(gene,0);

function gene_fitness2 = get_gene_fitness2(gene,show)
next_gene = movev(gene);
legs_on_ground = get_legs_on_ground();
down_bonus = get_down_bonus(legs_on_ground);
moveh_lst = moveh(next_gene);
r_fit = get_side_fit(moveh_lst,legs_on_ground,5,0,0);
l_fit = get_side_fit(moveh_lst,legs_on_ground,6,0,0);
fitness = down_bonus * 1.000000000 * check_balance(legs_on_ground) * get_balanced_fitness(r_fit,l_fit) * zero_log_adjust(legs_on_ground,moveh_lst);
if show
    show_gene_fitness2(next_gene,legs_on_ground,moveh_lst,fitness);
else
    gene_fitness2 = fitness;
end

function zla = zero_log_adjust(log,mhl)
if (isempty(log))
    zla = 1;
elseif (mhl(log(1)) == 0)
    zla = 0.25;
else
    zla = zero_log_adjust(log(2:end),mhl);
end

function balance = check_balance(log)
even_over1 = length(find(ismember(log,[2 4 6]))) > 1;
odd_over1 = length(find(ismember(log,[1 3 5]))) > 1;
x = ((~isempty(find(log==2,1)) && ~isempty(find(log==6,1))) && (~isempty(find(log==3,1)) || odd_over1));
y = ((~isempty(find(log==1,1)) && ~isempty(find(log==5,1))) && (~isempty(find(log==4,1)) || even_over1));
z = ((~isempty(find(log==1,1)) && ~isempty(find(log==3,1))) && (~isempty(find(log==4,1)) && ~isempty(find(log==6,1))));
a = ((~isempty(find(log==3,1)) && ~isempty(find(log==5,1))) && (~isempty(find(log==2,1)) && ~isempty(find(log==4,1))));
b = ((~isempty(find(log==1,1)) && ~isempty(find(log==6,1))) || (~isempty(find(log==2,1)) && ~isempty(find(log==5,1))));
if (x || y || z || a)
    balance = 1.0;
elseif (length(log)>2 && b)
    balance = 0.6;
elseif ((~isempty(find(log==1,1)) && ~isempty(find(log==6,1))) || (~isempty(find(log==2,1)) && ~isempty(find(log==5,1))))
    balance = 0.5;
elseif (length(log)>2 && ~isempty(find(log==3,1)) && ~isempty(find(log==4,1)))
    balance = 0.4;
elseif (~isempty(find(log==3,1)) && ~isempty(find(log==4,1)))
    balance = 0.3;
else
    balance = 0.15;
end

%Works great on Scheme
% function balance = check_balance(log)
% even_over1 = length(find(ismember(log,[2 4 6]))) > 1;
% odd_over1 = length(find(ismember(log,[1 3 5]))) > 1;
% x = ((~isempty(find(log==2,1)) && ~isempty(find(log==6,1))) && (~isempty(find(log==3,1)) || odd_over1));
% y = ((~isempty(find(log==1,1)) && ~isempty(find(log==5,1))) && (~isempty(find(log==4,1)) || even_over1));
% z = ((~isempty(find(log==1,1)) && ~isempty(find(log==3,1))) && (~isempty(find(log==4,1)) && ~isempty(find(log==6,1))));
% a = ((~isempty(find(log==3,1)) && ~isempty(find(log==5,1))) && (~isempty(find(log==2,1)) && ~isempty(find(log==4,1))));
% b = ((~isempty(find(log==1,1)) && ~isempty(find(log==6,1))) || (~isempty(find(log==2,1)) && ~isempty(find(log==5,1))));
% if (x || y || z || a)
%     balance = 1.0;
% elseif (length(log)>2 && b)
%     balance = 0.75;
% elseif ((~isempty(find(log==1,1)) && ~isempty(find(log==6,1))) || (~isempty(find(log==2,1)) && ~isempty(find(log==5,1))))
%     balance = 0.55;
% elseif (length(log)>2 && ~isempty(find(log==3,1)) && ~isempty(find(log==4,1)))
%     balance = 0.45;
% elseif (~isempty(find(log==3,1)) && ~isempty(find(log==4,1)))
%     balance = 0.3;
% else
%     balance = 0.15;
% end

function output = collect(gene)
output = gene(2);

function lst = less_leg(list)
[idx,idx] = sort(cellfun(@collect,list));
lst = list(idx);

function switch_delay = get_switch_delay()
global robot;
switch_delay = get_switch_delay2(robot(1:6,1)');

function switch_delay2 = get_switch_delay2(lld)
if (length(lld) < 4)
    switch_delay2 = 1;
elseif (get_switch_delay3(1,lld(1),lld(2:end)) < 0)
    switch_delay2 = 0.5;
else
    switch_delay2 = get_switch_delay2(lld(2:end));
end

function switch_delay3 = get_switch_delay3(num_down,leg,list_legs)
global leg_height_equiv_dist;
if isempty(list_legs)
    if num_down > 3
        switch_delay3 = -2;
    else
        switch_delay3 = 0;
    end
elseif abs(leg - list_legs(1)) < leg_height_equiv_dist
    switch_delay3 = get_switch_delay3(num_down+1,leg,list_legs(2:end));
else
    switch_delay3 = get_switch_delay3(num_down,leg,list_legs(2:end));
end

function sidefit = get_side_fit(moveh_lst,log,index,count,fit)
if 0 > index
    sidefit = fit/count;
else
    if ~isempty(find((log==index), 1))
        sidefit = get_side_fit(moveh_lst,log,index-2,count+1,fit+moveh_lst(index));
    else
        sidefit = get_side_fit(moveh_lst,log,index-2,count,fit);
    end
end

function newgene = movev(gene)
state=robot_state();
if floor(gene/2048) == 1
    state.move_leg_v(4,'up');
else
    state.move_leg_v(4,'down');
end
gene = mod(gene,2048);
if floor(gene/1024) == 1
    state.move_leg_v(5,'up');
else
    state.move_leg_v(5,'down');
end
gene = mod(gene,1024);
if floor(gene/512) == 1
    state.move_leg_v(6,'up');
else
    state.move_leg_v(6,'down');
end
gene = mod(gene,512);
if floor(gene/256) == 1
    state.move_leg_v(3,'up');
else
    state.move_leg_v(3,'down');
end
gene = mod(gene,256);
if floor(gene/128) == 1
    state.move_leg_v(2,'up');
else
    state.move_leg_v(2,'down');
end
gene = mod(gene,128);
if floor(gene/64) == 1
    state.move_leg_v(1,'up');
else
    state.move_leg_v(1,'down');
end
newgene = mod(gene,64);


function list = moveh(gene)
state = robot_state();
lst = [-100 -100 -100 -100 -100 -100];
if floor(gene/32) == 1
    lst(3)=state.move_leg_h(3,'back');
else
    lst(3)=state.move_leg_h(3,'forward');
end
gene = mod(gene,32);
if floor(gene/16) == 1
    lst(2)=state.move_leg_h(2,'back');
else
    lst(2)=state.move_leg_h(2,'forward');
end
gene = mod(gene,16);
if floor(gene/8) == 1
    lst(1)=state.move_leg_h(1,'back');
else
    lst(1)=state.move_leg_h(1,'forward');
end
gene = mod(gene,8);
if floor(gene/4) == 1
    lst(4)=state.move_leg_h(4,'back');
else
    lst(4)=state.move_leg_h(4,'forward');
end
gene = mod(gene,4);
if floor(gene/2) == 1
    lst(5)=state.move_leg_h(5,'back');
else
    lst(5)=state.move_leg_h(5,'forward');
end
gene = mod(gene,2);
if gene == 1
    lst(6)=state.move_leg_h(6,'back');
else
    lst(6)=state.move_leg_h(6,'forward');
end
list = lst;

function log = get_legs_on_ground()
length_list = less_leg(current_up_pairs([1 2 3 4 5 6]));
on_ground_list = get_eq_list(length_list{1}(2),length_list);
num_og = length(on_ground_list);
first_leg = length_list{1}(1);
second_leg = length_list{2}(1);
second_leg_length = length_list{2}(2);
third_leg_pair = length_list{3};
legs_remaining = length_list(3:end);
fourth_leg_pair = length_list{4};
if 3 < num_og
    log = sort(legs_only(on_ground_list));
elseif 3 == num_og
    legs_only_list = legs_only(on_ground_list);
    if (all(mod(legs_only_list,2)==1) || all(mod(legs_only_list,2)==0))
        log = sort([legs_only_list get_next(fourth_leg_pair,legs_remaining(2:end))]);
    else
        log = legs_only_list;
    end
elseif (first_leg + second_leg) == 7
    log = sort(dynamic_gait(first_leg,second_leg,second_leg_length,legs_remaining));
elseif mod(first_leg,2)==1
    if mod(second_leg,2)==1
        log = sort([[first_leg second_leg] get_next_even(third_leg_pair,legs_remaining)]);
    else
        log = sort([[first_leg second_leg] get_next(third_leg_pair,legs_remaining)]);
    end
else
    if mod(second_leg,2)==0
        log = sort([[first_leg second_leg] get_next_odd(third_leg_pair,legs_remaining)]);
    else
        log = sort([[first_leg second_leg] get_next(third_leg_pair,legs_remaining)]);
    end
end

function output = get_balanced_fitness(rf,lf)
global temp;
if temp > 97
    output = (rf + lf)/2;
elseif temp > 94
    output = ((rf + lf)/2) * get_switch_delay();
else
    output = min(rf,lf) * get_switch_delay();
end

function output = current_up_pairs(indices)
global robot;
list = cell(1,length(indices));
for i=1:length(indices)
    list{i} = [indices(i) robot(indices(i),1)];
end
output = list;

function dg = dynamic_gait(fl,sl,sll,lr)
dg = [[fl sl] legs_only(get_eq_list_spec(sll,lr,3))];

function next = get_next(tlp,lr)
next = legs_only(get_eq_list(tlp(2),lr));

function next_odd = get_next_odd(tlp,lr)
if mod(tlp(1),2)==1
    next_odd = legs_only(get_eq_list_odd(tlp(2),lr));
else
    next_odd = get_next_odd(lr{2},lr(2:end));
end

function next_even = get_next_even(tlp,lr)
if mod(tlp(1),2)==0
    next_even = legs_only(get_eq_list_even(tlp(2),lr));
else
    next_even = get_next_even(lr{2},lr(2:end));
end

function legsonly = legs_only(ogl)
answer=zeros(1,length(ogl));
for i=1:length(ogl)
    answer(i) = ogl{i}(1);
end
legsonly = sort(answer);


function eql = get_eq_list(x,lst)
list = cell(1,length(lst));
for i=1:length(lst)
    if x==lst{i}(2)
        list(i) = lst(i);
    end
end
list(cellfun(@(list) isempty(list),list)) = [];
eql = list;

function eqlo = get_eq_list_odd(x,lst)
list = cell(1,length(lst));
for i=1:length(lst)
    if (x==lst{i}(2) && mod(lst{i}(1),2)==1)
        list(i) = lst(i);
    end
end
list(cellfun(@(list) isempty(list),list)) = [];
eqlo = list;

function eqle = get_eq_list_even(x,lst)
list = cell(1,length(lst));
for i=1:length(lst)
    if (x==lst{i}(2) && mod(lst{i}(1),2)==0)
        list(i) = lst(i);
    end
end
list(cellfun(@(list) isempty(list),list)) = [];
eqle = list;

function eqls = get_eq_list_spec(x,lst,spec)
list = cell(1,length(lst));
for i=1:length(lst)
    if abs(x - lst{i}(2)) <= spec
        list(i) = lst(i);
    end
end
list(cellfun(@(list) isempty(list),list)) = [];
eqls = list;

function db = get_down_bonus(log)
global robot;
if isempty(log)
    db = 1.0;
elseif (robot(log(1),1) == robot(log(1),3))
    db = get_down_bonus(log(2:end));
else
    db = 0.5;
end

function remain = get_remain(x,lst)
if isempty(lst)
    remain = [];
else
    if x == lst{1}(1)
        remain = get_remain(x,lst(2:end));
    else
        remain = lst;
    end
end