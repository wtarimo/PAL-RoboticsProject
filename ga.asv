function myga = ga()
myga.evolve = @evolve;

function ep = evolve(pop,sum_fits,total_fit_int,best_fit,count)
ep = [pop(best_fit) evolve2(pop,sum_fits,total_fit_int,count)];

function ep2 = evolve2(pop,sum_fits,total_fit_int,count)
global ind_per_pop;
global same_count;
out = cell(1,ind_per_pop-1);
while count < ind_per_pop
    if total_fit_int <= 0
        total_fit_int = 1;
    end
    ind1 = pop{get_rand_int_num(sum_fits,floor(rand*total_fit_int),1)};
    ind2 = pop{get_rand_int_num(sum_fits,floor(rand*total_fit_int),1)};
    if ~ind_equal(ind1,ind2)
        out{count} =  mutate(crossover(ind1,ind2));
        count = count+1;
    elseif floor(rand*2)==1
        same_count=same_count+1;
        out{count} = mutatex(ind1);
        count = count+1;
    else
        same_count = same_count+1;
    end
end

ep2 = out;

function output = crossover(ind11,ind22)
ind1 = ind11(1:end-1);
ind2 = ind22(1:end-1);
switch floor(rand*12)
    case 0
        out = ind_crossover(ind1,ind2,ceil(rand*4));
    case 1
        out = [ind1{1} ind1{2} ind2(3) ind2(4)];
        %out = start_crossover(ind1,ind2); Changed to match scheme code
    case {2,3,4,5,6}
        point = length(ind1{4});
        %point = min(length(ind1{4}),length(ind2{4}));
        pt1 = ceil(rand*point);
        pt2 = ceil(rand*point);
        out = loop_crossover(ind1,ind2,min(pt1,pt2),max(pt1,pt2));
    case {7,8,9,10,11}
        out = gene_crossover(ind1,ind2);
end
bias = (ind11{5}+ind22{5})/2;
output = [out bias];

function output = ind_crossover(ind1,ind2,cross_pt)
output = [ind1(1:cross_pt-1) ind2(cross_pt:end)];

% function output = start_crossover(ind1,ind2)
% if floor(rand*2)
%     output = [ind1{1} ind1{2} {{[ind1{3}{1}(1) ind2{3}{1}(2)]}} ind2(4)];
% else
%     output = [ind1{1} ind1{2} {{[ind2{3}{1}(1) ind1{3}{1}(2)]}} ind2(4)];
% end

function output = loop_crossover(ind1,ind2,cp1,cp2)
output =[ind1{1} ind1{2} ind1(3) {[ind1{4}(1:cp1) ind2{4}(cp1+1:cp2) ind1{4}(cp2+1:end)]}];

function output = gene_crossover(ind1,ind2)
output = [cross_numbers(ind1{1},ind2{1}) cross_numbers(ind1{2},ind2{2}) {gene_crossover2(ind1{3},ind2{3})} {gene_crossover2(ind1{4},ind2{4})}];

function output = gene_crossover2(genes1,genes2)
if isempty(genes1)
    output = genes2;
elseif isempty(genes2)
    output = genes1;
else
    output = [cross_gene(genes1{1},genes2{1}) gene_crossover2(genes1(2:end),genes2(2:end))];
end

function output = mutate(ind)
output = [mutate_number(ind{1}) mutate_number(ind{2}) {mutate2(ind{3})} {mutate2(ind{4})} ind{5}];

function output = mutate2(genes)
global prob_of_mutate;
gen = pop_generation();
if isempty(genes)
    output = [];
else
    switch floor(rand*prob_of_mutate)
        case 0
            output = [{gen.make_random_gene()} mutate2(genes(2:end))];
        case 1
            new_gene = mutate_gene(genes{1});
            output = [{[mod(new_gene(1),11) new_gene(2)]} mutate2(genes(2:end))];
        otherwise
            output = [genes(1) mutate2(genes(2:end))];
    end
end

function output = mutate_gene(gene)
if isempty(gene)
    output = [];
else
    output = [mutate_gene_prt(gene(1)) mutate_gene(gene(2:end))];
end

function output = mutate_gene_prt(gene_prt)
point = 2^(floor(rand*16));
if point == mod((floor(gene_prt/point)*point),point*2)
    output = gene_prt - point;
else
    output = gene_prt + point;
end

function output = mutate_number(num)
global prob_of_mutate;
if floor(rand*prob_of_mutate) < 3
    output = mutate_gene_prt(num);
else
    output = num;
end

function output = cross_gene(gene1,gene2)
if isempty(gene1)
    output = [];
else
    switch floor(rand*3)
        case 0
            output = [cross_gene_prt(gene1(1),gene2(1)) cross_gene(gene1(2:end),gene2(2:end))];
        case 1
            output = [gene1(1) cross_gene(gene1(2:end),gene2(2:end))];
        case 2
            output = [gene2(1) cross_gene(gene1(2:end),gene2(2:end))];
    end
end

function output = cross_gene_prt(gene1prt,gene2prt)
point = 2^(floor(rand*16));
output = (floor(gene1prt/point) * point) + (mod(gene2prt,point));

function output = cross_numbers(num1,num2)
output = cross_gene_prt(num1,num2);

function output = get_rand_int_num(sum_fits,rand_num,count)
if isempty(sum_fits)
    error('Error in get_rand_int_num(,,,): rand num greater than total fitness');
else
    if rand_num < sum_fits(1)
        output = count;
    else
        output = get_rand_int_num(sum_fits(2:end),rand_num,count+1);
    end
end

function output = mutatex(ind)
output = [mutate_numberx(ind{1}) mutate_numberx(ind{2}) {mutate2x(ind{3})} {mutate2x(ind{4})} ind{5}];

function output = mutate2x(genes)
gen = pop_generation();
if isempty(genes)
    output = [];
else
    switch floor(rand*10)
        case 0
            output = [{gen.make_random_gene()} mutate2x(genes(2:end))];
        case 1
            new_gene = mutate_gene(genes{1});
            output = [{[mod(new_gene(1),11) new_gene(2)]} mutate2x(genes(2:end))];
        otherwise
            output = [genes(1) mutate2x(genes(2:end))];
    end
end

function output = mutate_numberx(num)
if floor(rand*9) < 3
    output = mutate_gene_prt(num);
else
    output = num;
end

function output = ind_equal(ind1,ind2)
ind1 = cell2str([ind1{1} ind1{2} ind1{3} ind1{4}]);
ind2 = cell2str([ind2{1} ind2{2} ind2{3} ind2{4}]);
if length(ind1) ~= length(ind2)
    output = 0;
else
    output = all((ind1==ind2)==1);
end